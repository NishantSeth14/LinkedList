/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:

    ListNode* reverseList(ListNode* head) {
        ListNode *dummy = NULL;
        while(head != NULL){
            ListNode *nex = head->next;
            head->next = dummy;
            dummy = head;
            head = nex;
        }
        return dummy;
    }

    bool isPalindrome(ListNode* head) {
        ListNode *slow = head, *fast = head;
        while(fast->next != NULL && fast->next->next != NULL){
            slow = slow->next;
            fast = fast->next->next;
        }
        slow->next = reverseList(slow->next);
        ListNode *start = head, *mid = slow->next;
        while(mid != NULL){
            if(mid->val != start->val){
                return false;    
            }
            mid = mid->next;
            start = start->next;
        }
        slow->next = reverseList(slow->next);
        return true;
    }
};

//T.C O(n)
//S.C O(1)
