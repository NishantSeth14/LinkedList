/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
        if(list1 == NULL){
            return list2;
        }
        if(list2 == NULL){
            return list1;
        }

        ListNode* mergedList = nullptr;
        if(list2->val <= list1->val){
            mergedList = list2;
            mergedList->next = mergeTwoLists(list1, list2->next);
        }
        else{
            mergedList = list1;
            mergedList->next = mergeTwoLists(list1->next, list2);
        }
        return mergedList;
    }
};

//S.C O(n1+n2)
//T.C O(n1+n2)


//2nd Method

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
        if(list1 == NULL){
            return list2;
        }
        if(list2 == NULL){
            return list1;
        }
        if(list1->val > list2->val){
            swap(list1,list2);
        }
        ListNode* res = list1;
        while(list1 != NULL && list2 != NULL){
            ListNode *temp = NULL;
            while(list1 != NULL && list1->val <= list2->val){
                temp = list1;
                list1 = list1->next;
            }
            temp->next = list2;
            swap(list1, list2);
        }
        return res;    
    }
};

//S.C - > O(n1+n2)
//T.C -> O(1)
